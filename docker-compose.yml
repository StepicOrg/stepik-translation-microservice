version: '3'

services:
  web:
    build: ./web # specify the directory, where Dockerfile is
    env_file: ./web/translation_microservice/.env
    volumes:
      - ./web:/code/
    depends_on:
      - postgres
    # The command key overrides the default image command (gunicorn server),
    # allowing auto-code reload in development.
    # The command is tweaked to allow the local server to be accessed
    # by cross-origin requests (by binding to system IP 0.0.0.0 rather than localhost).
    # See: https://stackoverflow.com/questions/5768797/manage-py-runserver
    command: bash -c 'python manage.py makemigrations && python manage.py migrate && python manage.py runserver 0.0.0.0:8000'


  # Technically, we could access the server using port 8000 without in dev.
  # But, running the proxy, and accessing the server through it on port 80, mirrors
  # the exact production environment.
  nginx:
    build: ./nginx/
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./web/static:/code/static
    depends_on:
      - web

  postgres:
    image: postgres:latest
    ports:
      - "5432:5432"
    env_file: ./web/translation_microservice/.env
    volumes:
      - /var/lib/postgresql/data/